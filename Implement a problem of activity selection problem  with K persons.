#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to store the start and end time of shops
struct Shop {
    int start, end;
};

// Comparator function to sort shops based on their end time
bool compare(Shop a, Shop b) {
    return a.end < b.end;
}

// Function to find the maximum number of shops that can be visited
int maxShops(vector<int>& S, vector<int>& E, int K) {
    int N = S.size();
    
    // Create a vector of shops
    vector<Shop> shops(N);
    for (int i = 0; i < N; i++) {
        shops[i] = {S[i], E[i]};
    }
    
    // Sort shops by their ending times
    sort(shops.begin(), shops.end(), compare);
    
    // Vector to store the end time of the last shop visited by each person
    vector<int> endTime(K, 0);
    int shopCount = 0;

    // Iterate through each shop
    for (int i = 0; i < N; i++) {
        // Try to assign the shop to the person who will be free the earliest
        for (int j = 0; j < K; j++) {
            if (endTime[j] <= shops[i].start) {
                // Assign this shop to the j-th person
                endTime[j] = shops[i].end;
                shopCount++;
                break;
            }
        }
    }
    
    return shopCount;
}

int main() {
    vector<int> S1 = {1, 8, 3, 2, 6};
    vector<int> E1 = {5, 10, 6, 5, 9};
    int K1 = 2;
    cout << "Maximum shops that can be visited: " << maxShops(S1, E1, K1) << endl;
    
    vector<int> S2 = {1, 2, 3};
    vector<int> E2 = {3, 4, 5};
    int K2 = 2;
    cout << "Maximum shops that can be visited: " << maxShops(S2, E2, K2) << endl;

    return 0;
}
